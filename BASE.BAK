#include <iostream.h>
#include <conio.h>
#include <stdlib.h>
#include <bios.h>

#define MaxY 10
#define MaxX 20
#define bool int
#define true 1
#define false 0

enum eDirection { STOP, UP, DOWN, LEFT, RIGHT };

char map[MaxY][MaxX];

class Object {
private:
	int x, y;
	char symbol;
	eDirection dir;
public:
	Object(int x, int y, char symbol, eDirection dir );
	~Object() {};
	bool move(int x, int y);
	inline bool isThere(int x, int y) {
		return (this->x == x && this->y == y) ? true : false;
	}
	void draw();
};

Object *tragu = (Object *) malloc(20 * sizeof(Object));

Object :: Object(int x, int y, char symbol, eDirection dir) {
	this->x = x;	this->y = y;
	this->symbol = symbol;	this->dir = dir;
}

bool Object :: move(int x, int y) {
	if( this->x+x < 0 || this->x+x > MaxX || this->y+y < 0 || this->y+y > MaxY )
		return false;
	else if( map[this->y+y][this->x+x] == '#' )
		return false;
	this->x+=x;	this->y+=y;
	return true;
}

void Object :: draw() {
	cout << this->symbol;
}

class Game {
private:
	Object *player;
	bool gameOver;
	int totalTragu;
public:
	Game();
	~Game() {};
	void draw();
	void input();
	void logic();
	int posCheck(int x, int y);
	inline bool getState() {	return this->gameOver;	}
};

Game :: Game() {
	Object *temp = new Object(1, 1, '@', STOP);
	tragu[0] = *temp;
	player = &tragu[0];
	totalTragu = 1;
	this->gameOver = false;
	for(int i = 0; i<MaxY; i++) {
		for(int j = 0; j<MaxX; j++) {
			map[i][j] = '.';
		}
	}
}

int Game :: posCheck(int x, int y) {
	for(int i = 0; i < totalTragu; i++) {
		if(tragu[i].isThere(x, y))
			return i;
	}
	return -1;
}

void Game :: draw() {
	for(int i = 0; i<MaxY; i++) {
		for(int j = 0; j<MaxX; j++) {
			gotoxy(j+1, i+1);
			int p = posCheck(j, i);
			if(p != -1)
				tragu[p].draw();
			else
				cout<<map[i][j];
		}
		cout<<endl;
	}
}

void Game :: input() {
	if(kbhit()) {
		switch(getch()) {
			case 27:	this->gameOver = true;
						break;
			case 'w':	this->player->move(0, -1);
						break;
			case 's':	this->player->move(0, +1);
						break;
			case 'a':	this->player->move(-1, 0);
						break;
			case 'd':	this->player->move(+1, 0);
						break;
		}
	}
}

int main() {
	clrscr();
	Game game;
	_setcursortype(_NOCURSOR);
	while(!game.getState()) {
		game.draw();
		game.input();
	}
	return 0;
}