#ifndef STATES_H
#define STATES_H

struct State {
    char fullName[20];
    char name[20];
    int duration;
    int val;
    int last;
} states[20];
int totStates = 0;
void State_init(struct State *this, char fullName[], char name[], int val, int duration, int last) {
	strcpy(this->fullName, fullName);	strcpy(this->name, name);   this->val = val;    this->duration = duration;  this->last = last;
}
void sortStates(struct State states[]) {
	int i, j;
	struct State temp;
	for(i = 0; i<totStates; i++)
		for(j = 0; j<totStates; j++)
			if(states[i].duration > states[j].duration) {
				temp = states[i];
				states[i] = states[j];
				states[j] = temp;
			}
}
void store() {
	FILE *file;
	struct State s;
	file = fopen("MZRUN/STATES.TXT", "w" );
	State_init(&s, "immunity1", "IMM", 5, 5, 0);
	if(file != NULL) {
		fscanf(file, "%s, %s, %d, %d, %d", s.fullName, s.name, s.duration, s.val, s.last);
	} else {
		clrscr();   printf("STATES.TXT missing");  exit(0);
	}
	fclose(file);
}
bool getState(struct State *this, char name[]) {
	FILE *file;
    int i = 0;
	char *ch, str[50], vals[5][20];
	file = fopen("MZRUN/STATES.TXT", "r" );
	if(file==NULL) {
		clrscr();   printf("STATES.TXT missing");  exit(0);
	}
	while (fgets(str, 100, file) != NULL) {
		ch = strtok(str, ", ");
        if(strcmp(name, ch) != 0) {
            continue;
        }
        while (ch != NULL) {
            //printf("%s\n", ch);
            strcpy(vals[i++], ch);
            ch = strtok(NULL, ", ");
        }
		State_init(this, vals[0], vals[1], atoi(vals[2]), atoi(vals[3]), atoi(vals[4]));
		printf("\n%s, %s, %d, %d, %d\n", this->fullName, this->name, this->val, this->duration, this->last);
        found =true;    break;
    }
	fclose(file);
    if(found)
	    return true;
    else
        return false;
}
bool addState(struct State states[], char name[], int time) {
	int i, loc, stateVal, stateDuration;
	bool found = false;
	char stateName[20];
    struct State temp;
	/*if(strcmp(name, "immunity1") == 0) {
		strcpy(stateName, "IMM");   stateVal = 0;   stateDuration = 5;  //kill monsters
	} else if(strcmp(name, "breaker1") == 0) {
		strcpy(stateName, "BRK");   stateVal = 0;   stateDuration = 10; //kill monsters and remove state
	} else if(strcmp(name, "fullvision1") == 0) {
		strcpy(stateName, "VIS");   stateVal = 0;   stateDuration = 5;  //give vision of full map
	} else if(strcmp(name, "slow1") == 0) {
		strcpy(stateName, "SLW");   stateVal = 1;   stateDuration = 5;  //decrease speed of time
	} else if(strcmp(name, "fast1") == 0) {
		strcpy(stateName, "FST");   stateVal = 1;   stateDuration = 5;  //increase speed of time
	} else if(strcmp(name, "repel1") == 0) {
		strcpy(stateName, "RPL");   stateVal = 1;   stateDuration = 5;  //decrease range
	} else if(strcmp(name, "attract1") == 0) {
		strcpy(stateName, "ATR");   stateVal = 1;   stateDuration = 5;  //increase range
	} else if(strcmp(name, "invisible1") == 0) {
		strcpy(stateName, "INV");   stateVal = 0;   stateDuration = 5;  //invisible player
	} else if(strcmp(name, "hinder1") == 0) {
		strcpy(stateName, "HND");   stateVal = 0;   stateDuration = 10;  //hinder player input 50% chance
	} else if(strcmp(name, "paralyze1") == 0) {
		strcpy(stateName, "PAR");   stateVal = 0;   stateDuration = 2;  //paralyze player
	} else if(strcmp(name, "stop1") == 0) {
		strcpy(stateName, "STP");   stateVal = 0;   stateDuration = 2;  //stop monsters
	} else return false;*/
    if(!getState(&temp, name)) return false;
	for(i = 0; i < totStates; i++) {
		if(strcmp(name, stateName) == 0) {
			if(strcmp(states[i].name, stateName) == 0)   break;
		}
	}
	if(i != totStates)  found = true;
	if(totStates<10 || found == true) {
		if(found == false) {
			totStates++;    loc = totStates-1;
		} else  loc = i;
		states[loc] = temp;
        states[loc].last = time;
	}
	sortStates(states);
    return true;
}
void removeState(struct State states[], int loc) {
    int i;
    if(totStates>0) {
        for(i = loc; i<totStates; i++) {
            states[i] = states[i+1];
        }
        totStates--;
    }
}

#endif